demo()
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
q()
find.package("devtools")
install.packages("devtools")
clear
cls
find_rtools()
find.packages("rtools")
find.package("rtools")
find.package("devtools")
find_rtools()
using library(devtools)
library(devtools)
find_rtools
find_rtools()
install.packages("KernSmooth")
library("KernSmooth")
getWd()
getwd()
q()
q()
q()
x <- "hello"
x
source("myscript.R")
ls
ls()
dir()
y <- c(1,2)
y
m <- matrix(nrow = 2, ncol = 5)
m
dim(m)
attributes(m)
library(swirl)
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4,5)
identical(my_matrix, my_matrix2)
patients <- matrix(dimnames=c("Bill", "Gina", "Kelly", "Sean"))
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patien", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
my_data.colnames() <- cnames
colnames(my_data) <- cnames
my_data
x
exit
quit
cls
y <- 10
f <- function(x){}
f <- function(x){y<-}
y <- 10
f <- function(x){
y <- 2
y ^ 2 + g(x)
}
g <- function(x){
x * y
}
f(3)
?unclass
x <- Sys.time()
x
unclass(x)
p <- as.POSIXlt(x)
p
unclass(p)
?strptime
cube <- function(x,n){
x^3
}
cube(3)
cube(3,5)
x <- 1:10
if(x > 5){
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
setwd("C:/Users/ben/git/datasciencecoursera/r/ProgrammingAssignment2")
mat <- matrix()
mat <- matrix()
mat <- matrix(c(4,2,7,6), 2,2)
mat
source("cachematrix.R")
source("cachemean.R")
makeVector(c(1,2,3))
vek <- makeVector(1:1000)
vek
vek$get
eek <- vek$get
eek
bigvek <- makeVector(1:1000000)
cachemean(bigvek)
cachemean(bigvek)
mymat <- makeCacheMatrix(mat)
cacheSolve(mymat)
source("cachematrix.R")
mymat <- makeCacheMatrix(mat)
mymat
cacheSolve(mymat)
source("cachematrix.R")
mymat <- makeCacheMatrix(mat)
cacheSolve(mymat)
solve(mat)
source("cachematrix.R")
mymat <- makeCacheMatrix(mat)
solve(mat)
cacheSolve(mymat)
